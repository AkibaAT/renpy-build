diff -ur SDL2-2.0.12/src/joystick/hidapi/SDL_hidapijoystick.c SDL2-2.0.12.new/src/joystick/hidapi/SDL_hidapijoystick.c
--- SDL2-2.0.12/src/joystick/hidapi/SDL_hidapijoystick.c	2020-03-10 21:36:18.000000000 -0400
+++ SDL2-2.0.12.new/src/joystick/hidapi/SDL_hidapijoystick.c	2021-01-07 01:05:58.401857961 -0500
@@ -551,6 +551,12 @@
     SDL_UnlockJoysticks();
 }
 
+static int HIDAPI_disabled = 0;
+
+void HIDAPI_disable () {
+    HIDAPI_disabled = 1;
+}
+
 static int
 HIDAPI_JoystickInit(void)
 {
@@ -560,6 +566,10 @@
         return 0;
     }
 
+    if (HIDAPI_disabled) {
+        return 0;
+    }
+
 #if defined(__MACOSX__) || defined(__IPHONEOS__) || defined(__TVOS__)
 	/* The hidapi framwork is weak-linked on Apple platforms */
     int HID_API_EXPORT HID_API_CALL hid_init(void) __attribute__((weak_import));
@@ -843,6 +853,10 @@
     SDL_bool supported = SDL_FALSE;
     SDL_bool result = SDL_FALSE;
 
+    if (HIDAPI_disabled) {
+        return SDL_FALSE;
+    }
+
     /* Make sure we're initialized, as this could be called from other drivers during startup */
     if (HIDAPI_JoystickInit() < 0) {
         return SDL_FALSE;
diff -ur SDL2-2.0.12/src/joystick/windows/SDL_xinputjoystick.c SDL2-2.0.12.new/src/joystick/windows/SDL_xinputjoystick.c
--- SDL2-2.0.12/src/joystick/windows/SDL_xinputjoystick.c	2020-03-10 21:36:18.000000000 -0400
+++ SDL2-2.0.12.new/src/joystick/windows/SDL_xinputjoystick.c	2021-01-07 01:19:58.255957499 -0500
@@ -212,7 +212,10 @@
     *pVID = 0x045e; /* Microsoft */
     *pPID = 0x02fd; /* XBox One S Bluetooth */
     *pVersion = 0;
+
 }
+       
+void HIDAPI_disable(void);
 
 static void
 AddXInputDevice(Uint8 userid, BYTE SubType, JoyStick_DeviceData **pContext)
@@ -291,11 +294,20 @@
         return;
     }
 
+
 #ifdef SDL_JOYSTICK_HIDAPI
-    if (HIDAPI_IsDevicePresent(vendor, product, version, pNewJoystick->joystickname)) {
-        /* The HIDAPI driver is taking care of this device */
-        SDL_free(pNewJoystick);
-        return;
+
+    if (!strcmp(pNewJoystick->joystickname, "Xbox 360 Controller")) {
+        HIDAPI_disable();
+
+    } else {
+
+        if (HIDAPI_IsDevicePresent(vendor, product, version, pNewJoystick->joystickname)) {
+            /* The HIDAPI driver is taking care of this device */
+            SDL_free(pNewJoystick);
+            return;
+        }
+
     }
 #endif
 
